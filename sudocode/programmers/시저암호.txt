
// 입력 문자열의 모든 문자에 대해 반복

StringBuilder sb = new StringBuilder();
for (char c : s.toCharArray()) {
    // c를 n만큼 민 문자를 builder에 붙이기
}
return sb.toString();

// 문자 c를 n만큼 민 새로운 문자를 계산하기 위해 메서드를 분리해준다.
// 입력 문자를 n만큼 민 문자를 반환하는 push() 메서드를 선언한다.
private char push(char c, int n) {
    // c를 n만큼 밀어 반환
}

// 알파벳이 아닌 경우 문자를 그대로 이어붙이기
// 알파벳이 아닌 경우 시저 암호에 영향을 받지 않기 때문에 Character 클래스의 isAlphabetic() 메서드를
// 사용해 알파벳이 아닌 문자는 그대로 반환될 수 있게 한다.
private char push(char c, int n) {
    if (!Character.isAlphabetic(c)) return c;

    // c를 n만큼 밀어 반환
}

// 아스키코드 사용하여 알파벳 검사하는 로직
if (!(c >= 'A' && c <= 'Z') && !(c >= 'a' && c <= 'z')) return c;

// 알파벳인 경우 n만큼 밀어주기
// 알파벳을 0~25로 변환하는 것은 숫자를 표현하는 문자를 정수로 변환하는 것과 같다.
// 대문자는 'A', 소문자는 'a'부터 시작하므로 이를 offset 변수에 저장하고, 이 변수를 사용하여
// 알파벳의 변환된 값 position을 다음과 같이 계산한다.
int offset = Character.isUpperCase(c) ? 'A' : 'a';
int position = c - offset;

// 이제 이 posistion을 n만큼 밀어준다. 마지막 위치에 도달하면 0부터 다시 시작해야 한다는 것이다.
// 알파벳은 a부터 z까지 있으므로 가능한 position은 0부터 ('Z' - 'A') 까지이다. 이 범위를 벗어날 때 0부터 시작되게 하는 것은
// 나머지 연산자로 다음과 같이 구현한다.
position = (position + n) % ('Z' - 'A' + 1);

// 처음에 구해두었던 offset과 방금 계산한 position을 이용하여 n만큼 밀린 문자를 만들어 반환한다.
return (char) (offset + position);

// 완성된 push() 메서드 활용하여 solution() 메서드 반복문 완성
for (char c : s.toCharArray) {
    sb.append(push(c, n));
}